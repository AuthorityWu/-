# 约定
棋局状态码：下棋动作未执行前的棋局状态码
下棋动作：就是下棋动作
新的棋局状态码：棋局状态码 + 下棋动作


# 前端任务
1.UI设计
2.API请求
2.1.棋局合法性检验 (棋局状态码) {
    ...
    retrun True/False
}
2.2.人机下棋 (棋局状态码，下棋方) {
    ...
    return {新的棋局状态码，下棋动作}
}
2.3.人机在线学习（(用户的)棋局状态码，(用户的)下棋动作）{...}


# 后端任务
1.搭建Flask
2.API请求处理
2.1.棋局合法性检验 (棋局状态码) {
    ...
    retrun True/False
}
2.2.人机下棋 (棋局状态码，下棋方) {
    # 获取下棋动作
    ...
    # 如果获取不到（未见过的棋局），使用随机下棋

    return {新的棋局状态码，下棋动作}
}

2.3.人机在线学习（棋局状态码，下棋动作）{
    # 数据库存储相应的棋局状态码及下棋动作
}


# 算法
1.数据处理（完成）
2.Spark及数据库搭建
3.下棋规则及校验算法
（完成；ps：简单测试通过，可能存在潜在BUG，需要前后端完成才能后进行测试）
4.人机下棋算法
（部分完成；ps：由于真正的人机下棋算法未完成，暂时用 get_random_move() 即随机生成下一步函数作为代替进行测试）


# 爬虫
1.爬取数据（完成，等待脚本上传）

# PPT相关工作
